// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TableOrder.Backend.Data;

#nullable disable

namespace TableOrder.Backend.Migrations
{
    [DbContext(typeof(TableOrderDbContext))]
    [Migration("20251022062845_AddVegetarianFlag")]
    partial class AddVegetarianFlag
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("TableOrder.Backend.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsVegetarian")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("PreparationTimeMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Pizza",
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7987),
                            Description = "Classic tomato sauce, fresh mozzarella, and basil",
                            IsAvailable = true,
                            IsVegetarian = true,
                            Name = "Margherita Pizza",
                            PreparationTimeMinutes = 20,
                            Price = 12.99m,
                            RestaurantId = 1,
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7988)
                        },
                        new
                        {
                            Id = 2,
                            Category = "Pizza",
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7996),
                            Description = "Tomato sauce, mozzarella, and spicy pepperoni",
                            IsAvailable = true,
                            IsVegetarian = true,
                            Name = "Pepperoni Pizza",
                            PreparationTimeMinutes = 20,
                            Price = 14.99m,
                            RestaurantId = 1,
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7997)
                        },
                        new
                        {
                            Id = 3,
                            Category = "Salad",
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(8000),
                            Description = "Crisp romaine lettuce, parmesan cheese, and croutons",
                            IsAvailable = true,
                            IsVegetarian = true,
                            Name = "Caesar Salad",
                            PreparationTimeMinutes = 10,
                            Price = 8.99m,
                            RestaurantId = 1,
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(8001)
                        },
                        new
                        {
                            Id = 4,
                            Category = "Appetizer",
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(8003),
                            Description = "Spicy buffalo wings served with ranch dressing",
                            IsAvailable = true,
                            IsVegetarian = true,
                            Name = "Chicken Wings",
                            PreparationTimeMinutes = 15,
                            Price = 9.99m,
                            RestaurantId = 1,
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(8003)
                        },
                        new
                        {
                            Id = 5,
                            Category = "Pasta",
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(8006),
                            Description = "Creamy pasta with bacon, egg, and parmesan",
                            IsAvailable = true,
                            IsVegetarian = true,
                            Name = "Pasta Carbonara",
                            PreparationTimeMinutes = 18,
                            Price = 13.99m,
                            RestaurantId = 1,
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(8006)
                        },
                        new
                        {
                            Id = 6,
                            Category = "Main Course",
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(8009),
                            Description = "Fresh Atlantic salmon with seasonal vegetables",
                            IsAvailable = true,
                            IsVegetarian = true,
                            Name = "Grilled Salmon",
                            PreparationTimeMinutes = 25,
                            Price = 18.99m,
                            RestaurantId = 1,
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(8009)
                        },
                        new
                        {
                            Id = 7,
                            Category = "Dessert",
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(8011),
                            Description = "Rich chocolate cake with vanilla ice cream",
                            IsAvailable = true,
                            IsVegetarian = true,
                            Name = "Chocolate Cake",
                            PreparationTimeMinutes = 5,
                            Price = 6.99m,
                            RestaurantId = 1,
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(8012)
                        },
                        new
                        {
                            Id = 8,
                            Category = "Beverage",
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(8014),
                            Description = "Refreshing soft drink",
                            IsAvailable = true,
                            IsVegetarian = true,
                            Name = "Coca Cola",
                            PreparationTimeMinutes = 2,
                            Price = 2.99m,
                            RestaurantId = 1,
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(8014)
                        });
                });

            modelBuilder.Entity("TableOrder.Backend.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SubTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<int>("TableId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("TableOrder.Backend.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("MenuItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SpecialInstructions")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("TableOrder.Backend.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasPrecision(10, 2)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("TableOrder.Backend.Models.Restaurant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main Street, City, State 12345",
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7778),
                            Email = "info@tableorder.com",
                            Name = "TableOrder Restaurant",
                            Phone = "(555) 123-4567",
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7779)
                        });
                });

            modelBuilder.Entity("TableOrder.Backend.Models.Table", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RestaurantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId", "Number")
                        .IsUnique();

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 2,
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7935),
                            Number = 1,
                            RestaurantId = 1,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7936)
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 4,
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7940),
                            Number = 2,
                            RestaurantId = 1,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7940)
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 6,
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7943),
                            Number = 3,
                            RestaurantId = 1,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7943)
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 2,
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7945),
                            Number = 4,
                            RestaurantId = 1,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7945)
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 8,
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7947),
                            Number = 5,
                            RestaurantId = 1,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7948)
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 4,
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7949),
                            Number = 6,
                            RestaurantId = 1,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7950)
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 2,
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7951),
                            Number = 7,
                            RestaurantId = 1,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7952)
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 6,
                            CreatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7953),
                            Number = 8,
                            RestaurantId = 1,
                            Status = "Available",
                            UpdatedAt = new DateTime(2025, 10, 22, 6, 28, 44, 345, DateTimeKind.Utc).AddTicks(7954)
                        });
                });

            modelBuilder.Entity("TableOrder.Backend.Models.MenuItem", b =>
                {
                    b.HasOne("TableOrder.Backend.Models.Restaurant", "Restaurant")
                        .WithMany("MenuItems")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("TableOrder.Backend.Models.Order", b =>
                {
                    b.HasOne("TableOrder.Backend.Models.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("TableOrder.Backend.Models.OrderItem", b =>
                {
                    b.HasOne("TableOrder.Backend.Models.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TableOrder.Backend.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TableOrder.Backend.Models.Payment", b =>
                {
                    b.HasOne("TableOrder.Backend.Models.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("TableOrder.Backend.Models.Table", b =>
                {
                    b.HasOne("TableOrder.Backend.Models.Restaurant", "Restaurant")
                        .WithMany("Tables")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("TableOrder.Backend.Models.MenuItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("TableOrder.Backend.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("TableOrder.Backend.Models.Restaurant", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("TableOrder.Backend.Models.Table", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
